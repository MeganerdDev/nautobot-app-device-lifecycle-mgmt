# Generated by Django 3.1.13 on 2021-08-23 13:05

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("extras", "0005_configcontext_device_types"),
        ("dcim", "0004_initial_part_4"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="SoftwareLCM",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("version", models.CharField(max_length=50)),
                ("alias", models.CharField(blank=True, max_length=50, null=True)),
                ("release_date", models.DateField(blank=True, null=True)),
                ("end_of_support", models.DateField(blank=True, null=True)),
                ("documentation_url", models.URLField(blank=True)),
                ("download_url", models.URLField(blank=True)),
                ("image_file_name", models.CharField(blank=True, max_length=100)),
                ("image_file_checksum", models.CharField(blank=True, max_length=256)),
                ("long_term_support", models.BooleanField(default=False)),
                ("pre_release", models.BooleanField(default=False)),
                ("device_platform", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="dcim.platform")),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "Software",
                "ordering": ("end_of_support", "release_date"),
                "unique_together": {("device_platform", "version")},
            },
        ),
        migrations.CreateModel(
            name="ProviderLCM",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("physical_address", models.CharField(blank=True, max_length=200)),
                ("contact_name", models.CharField(blank=True, max_length=50)),
                ("contact_phone", models.CharField(blank=True, max_length=20)),
                ("contact_email", models.EmailField(blank=True, max_length=254)),
                ("comments", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="HardwareLCM",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("inventory_item", models.CharField(blank=True, max_length=255, null=True)),
                ("release_date", models.DateField(blank=True, null=True)),
                ("end_of_sale", models.DateField(blank=True, null=True)),
                ("end_of_support", models.DateField(blank=True, null=True)),
                ("end_of_sw_releases", models.DateField(blank=True, null=True)),
                ("end_of_security_patches", models.DateField(blank=True, null=True)),
                ("documentation_url", models.URLField(blank=True)),
                ("comments", models.TextField(blank=True, null=True)),
                (
                    "device_type",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="dcim.devicetype"
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ("end_of_support", "end_of_sale"),
            },
        ),
        migrations.CreateModel(
            name="ValidatedSoftwareLCM",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("assigned_to_object_id", models.UUIDField()),
                ("start", models.DateField()),
                ("end", models.DateField(blank=True, null=True)),
                ("preferred", models.BooleanField(default=False)),
                (
                    "assigned_to_content_type",
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            ("app_label", "dcim"), ("model__in", ("device", "devicetype", "inventoryitem"))
                        ),
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "software",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="nautobot_device_lifecycle_mgmt.softwarelcm"
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "Validated Software",
                "ordering": ("software", "preferred", "start"),
                "unique_together": {("software", "assigned_to_content_type", "assigned_to_object_id")},
            },
        ),
        migrations.CreateModel(
            name="ContractLCM",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                ("cost", models.FloatField(blank=True, null=True)),
                ("support_level", models.CharField(blank=True, max_length=64, null=True)),
                ("contract_type", models.CharField(blank=True, max_length=32, null=True)),
                ("comments", models.TextField(blank=True)),
                (
                    "provider",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nautobot_plugin_device_lifecycle_mgmt.providerlcm",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "ordering": ("name", "start"),
            },
        ),
        migrations.AddConstraint(
            model_name="hardwarelcm",
            constraint=models.UniqueConstraint(fields=("device_type",), name="unique_device_type"),
        ),
        migrations.AddConstraint(
            model_name="hardwarelcm",
            constraint=models.UniqueConstraint(fields=("inventory_item",), name="unique_inventory_item_part"),
        ),
        migrations.AddConstraint(
            model_name="hardwarelcm",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("device_type__isnull", False), ("inventory_item__isnull", True)),
                    models.Q(("device_type__isnull", True), ("inventory_item__isnull", False)),
                    _connector="OR",
                ),
                name="At least one of InventoryItem or DeviceType specified.",
            ),
        ),
        migrations.AddConstraint(
            model_name="hardwarelcm",
            constraint=models.CheckConstraint(
                check=models.Q(("end_of_sale__isnull", False), ("end_of_support__isnull", False), _connector="OR"),
                name="End of Sale or End of Support must be specified.",
            ),
        ),
    ]
